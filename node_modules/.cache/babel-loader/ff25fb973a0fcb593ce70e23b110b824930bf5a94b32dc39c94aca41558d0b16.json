{"ast":null,"code":"var _jsxFileName = \"/Users/ankit/Thinkful/FlashCardProject/src/Layout/Cards/CardView.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { Link, useNavigate, useParams } from \"react-router-dom\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const CardView = ({\n  cards\n}) => {\n  _s();\n  const {\n    deckId\n  } = useParams();\n  const [index, setIndex] = useState(0);\n  const [isFlipped, setIsFlipped] = useState(false);\n  const navigator = useNavigate();\n  const flipFace = () => {\n    setIsFlipped(!isFlipped);\n  };\n  const nextCard = () => {\n    setIndex(index + 1);\n    setIsFlipped(false);\n    if (index === cards.length - 1) {\n      if (window.confirm(\"Restart Cards? \\n\\nClick 'cancel' to return to the home page.\")) {\n        setIndex(0);\n      } else {\n        navigator(\"/\");\n      }\n    }\n  };\n  if (cards) {\n    if (cards.length < 3) {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Not enough cards.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"You need at least 3 cards to study. There are \", cards.length, \" in this deck.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Link, {\n          to: `/decks/${deckId}/cards/new`,\n          className: \"button-link add\",\n          children: \"Add Cards\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true);\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"list-deck-item\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [\"Card \", index + 1, \" of \", cards.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: isFlipped ? cards[index].back : cards[index].front\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: flipFace,\n        className: \"button-link flip\",\n        children: \"Flip\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this), isFlipped && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: nextCard,\n        className: \"button-link next\",\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 32\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this);\n  }\n};\n_s(CardView, \"BoMeUGRsen8TovfcNSuN09AS2xI=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = CardView;\nexport default CardView;\nvar _c;\n$RefreshReg$(_c, \"CardView\");","map":{"version":3,"names":["useState","Link","useNavigate","useParams","React","jsxDEV","_jsxDEV","Fragment","_Fragment","CardView","cards","_s","deckId","index","setIndex","isFlipped","setIsFlipped","navigator","flipFace","nextCard","length","window","confirm","children","fileName","_jsxFileName","lineNumber","columnNumber","to","className","back","front","onClick","_c","$RefreshReg$"],"sources":["/Users/ankit/Thinkful/FlashCardProject/src/Layout/Cards/CardView.js"],"sourcesContent":["import {useState} from \"react\";\nimport {Link, useNavigate, useParams} from \"react-router-dom\";\nimport React from \"react\";\n\nexport const CardView = ({cards}) => {\n    const {deckId} = useParams();\n    const [index, setIndex] = useState(0);\n    const [isFlipped, setIsFlipped] = useState(false);\n    const navigator = useNavigate();\n\n    const flipFace = () => {\n        setIsFlipped(!isFlipped);\n    }\n\n    const nextCard = () => {\n        setIndex(index + 1);\n        setIsFlipped(false);\n        if (index === cards.length - 1){\n            if (window.confirm(\"Restart Cards? \\n\\nClick 'cancel' to return to the home page.\")){\n                setIndex(0);\n            } else {\n                navigator(\"/\");\n            }\n        }\n    }\n    if (cards){\n        if (cards.length < 3){\n            return (\n                <>\n                    <h3>Not enough cards.</h3>\n                    <p>You need at least 3 cards to study. There are {cards.length} in this deck.</p>\n                    <Link to={`/decks/${deckId}/cards/new`} className='button-link add'>Add Cards</Link>\n                </>\n            )\n        }\n        return (\n            <div className=\"list-deck-item\">\n                <h4>Card {index+1} of {cards.length}</h4>\n                <p>{isFlipped ? cards[index].back : cards[index].front}</p>\n                <button onClick={flipFace} className=\"button-link flip\">Flip</button>\n                { isFlipped && <button onClick={nextCard} className=\"button-link next\">Next</button>}\n            </div>\n        )\n    }\n}\n\nexport default CardView;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}