{"ast":null,"code":"var _jsxFileName = \"/Users/ankit/Thinkful/FlashCardProject/src/Layout/Decks/DeckManager.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams, Outlet } from 'react-router-dom';\nimport { readDeck } from '../../utils/api'; // Import the API function\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DeckManager = () => {\n  _s();\n  const {\n    deckId\n  } = useParams(); // Get the deckId from URL\n  const [deck, setDeck] = useState();\n  useEffect(() => {\n    const fetchDeck = async () => {\n      try {\n        const fetchedDeck = await readDeck(deckId);\n        setDeck(fetchedDeck);\n      } catch (error) {\n        console.error('Failed to fetch deck:', error);\n      }\n    };\n    fetchDeck();\n  }, [deckId]);\n  if (!deck) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Outlet, {\n      context: {\n        deck,\n        setDeck\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 9\n  }, this);\n};\n_s(DeckManager, \"GbiIYI/lYxgtw9QDdHf48vn6eRU=\", false, function () {\n  return [useParams];\n});\n_c = DeckManager;\nexport default DeckManager;\nvar _c;\n$RefreshReg$(_c, \"DeckManager\");","map":{"version":3,"names":["React","useState","useEffect","useParams","Outlet","readDeck","jsxDEV","_jsxDEV","DeckManager","_s","deckId","deck","setDeck","fetchDeck","fetchedDeck","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","context","_c","$RefreshReg$"],"sources":["/Users/ankit/Thinkful/FlashCardProject/src/Layout/Decks/DeckManager.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams, Outlet } from 'react-router-dom';\nimport { readDeck } from '../../utils/api'; // Import the API function\n\nconst DeckManager = () => {\n    const { deckId } = useParams(); // Get the deckId from URL\n    const [deck, setDeck] = useState();\n\n    useEffect(() => {\n        const fetchDeck = async () => {\n            try {\n                const fetchedDeck = await readDeck(deckId);\n                setDeck(fetchedDeck);\n\n                } catch (error) {\n                    console.error('Failed to fetch deck:', error);\n                }\n        };\n        fetchDeck();\n        }, [deckId]);\n\n    if (!deck) {\n        return <div>Loading...</div>;\n    }\n    return (\n        <div>\n        <Outlet context={{ deck, setDeck }} /> {/* Provide deck and setDeck to children */}\n        </div>\n    );\n}\n\nexport default DeckManager;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,SAAS,EAAEC,MAAM,QAAQ,kBAAkB;AACpD,SAASC,QAAQ,QAAQ,iBAAiB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE5C,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM;IAAEC;EAAO,CAAC,GAAGP,SAAS,CAAC,CAAC,CAAC,CAAC;EAChC,MAAM,CAACQ,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAC,CAAC;EAElCC,SAAS,CAAC,MAAM;IACZ,MAAMW,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC1B,IAAI;QACA,MAAMC,WAAW,GAAG,MAAMT,QAAQ,CAACK,MAAM,CAAC;QAC1CE,OAAO,CAACE,WAAW,CAAC;MAEpB,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MACjD;IACR,CAAC;IACDF,SAAS,CAAC,CAAC;EACX,CAAC,EAAE,CAACH,MAAM,CAAC,CAAC;EAEhB,IAAI,CAACC,IAAI,EAAE;IACP,oBAAOJ,OAAA;MAAAU,QAAA,EAAK;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAChC;EACA,oBACId,OAAA;IAAAU,QAAA,gBACAV,OAAA,CAACH,MAAM;MAACkB,OAAO,EAAE;QAAEX,IAAI;QAAEC;MAAQ;IAAE;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,KAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAClC,CAAC;AAEd,CAAC;AAAAZ,EAAA,CAzBKD,WAAW;EAAA,QACML,SAAS;AAAA;AAAAoB,EAAA,GAD1Bf,WAAW;AA2BjB,eAAeA,WAAW;AAAC,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}